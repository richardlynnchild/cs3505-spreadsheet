<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DependencyGraph</name>
    </assembly>
    <members>
        <member name="T:SpreadsheetUtilities.DependencyGraph">
             <summary>
             (s1,t1) is an ordered pair of strings
             t1 depends on s1; s1 must be evaluated before t1
             
             A DependencyGraph can be modeled as a set of ordered pairs of strings.  Two ordered pairs
             (s1,t1) and (s2,t2) are considered equal if and only if s1 equals s2 and t1 equals t2.
             Recall that sets never contain duplicates.  If an attempt is made to add an element to a 
             set, and the element is already in the set, the set remains unchanged.
             
             Given a DependencyGraph DG:
             
                (1) If s is a string, the set of all strings t such that (s,t) is in DG is called dependents(s).
                    (The set of things that depend on s)    
                    
                (2) If s is a string, the set of all strings t such that (t,s) is in DG is called dependees(s).
                    (The set of things that s depends on) 
            
             For example, suppose DG = {("a", "b"), ("a", "c"), ("b", "d"), ("d", "d")}
                 dependents("a") = {"b", "c"}
                 dependents("b") = {"d"}
                 dependents("c") = {}
                 dependents("d") = {"d"}
                 dependees("a") = {}
                 dependees("b") = {"a"}
                 dependees("c") = {"a"}
                 dependees("d") = {"b", "d"}
             </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.#ctor">
            <summary>
            Creates an empty DependencyGraph.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.Size">
            <summary>
            The number of ordered pairs in the DependencyGraph.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.Item(System.String)">
            <summary>
            The size of dependees(s).
            This property is an example of an indexer.  If dg is a DependencyGraph, you would
            invoke it like this:
            dg["a"]
            It should return the size of dependees("a")
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.HasDependents(System.String)">
            <summary>
            Reports whether dependents(s) is non-empty.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.HasDependees(System.String)">
            <summary>
            Reports whether dependees(s) is non-empty.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GiveDependees(System.String)">
            <summary>
            returns the list of a cell's dependees
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GiveDependents(System.String)">
            <summary>
            returns a list of a cell's dependents
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GetDependents(System.String)">
            <summary>
            Enumerates dependents(s).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GetDependees(System.String)">
            <summary>
            Enumerates dependees(s).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.AddDependency(System.String,System.String)">
             <summary>
             <para>Adds the ordered pair (s,t), if it doesn't exist</para>
             
             <para>This should be thought of as:</para>   
             
               t depends on s
            
             </summary>
             <param name="s"> s must be evaluated first. T depends on S</param>
             <param name="t"> t cannot be evaluated until s is</param>        /// 
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.AddDependent(System.String,System.String)">
            <summary>
            Helper Method that adds t to the list of Dependents for s
            </summary>
            <param name="s"></param>
            <param name="t"></param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.AddDependee(System.String,System.String)">
            <summary>
            Helper Method that add s to the list of Dependees for t
            </summary>
            <param name="t"></param>
            <param name="s"></param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.RemoveDependency(System.String,System.String)">
            <summary>
            Removes the ordered pair (s,t), if it exists
            </summary>
            <param name="s"></param>
            <param name="t"></param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.RemoveDependent(System.String,System.String)">
            <summary>
            Helper method that removes t from s's list of dependees
            </summary>
            <param name="s">t depends on s</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.RemoveDependee(System.String,System.String)">
            <summary>
            Helper Method that removes s from t's its list of dependees
            </summary>
            <param name="t">t is a dependent of s</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceDependents(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all existing ordered pairs of the form (s,r).  Then, for each
            t in newDependents, adds the ordered pair (s,t).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceDependees(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all existing ordered pairs of the form (r,s).  Then, for each 
            t in newDependees, adds the ordered pair (t,s).
            </summary>
        </member>
    </members>
</doc>
